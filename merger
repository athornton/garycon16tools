#!/usr/bin/env perl
use strict;
use warnings;
use Text::CSV;

my $csv = Text::CSV->new ( { binary => 1 } )  # should set binary attribute.
    or die "Cannot use CSV: ".Text::CSV->error_diag ();

if ($#ARGV !=3) {
    die "Usage: $0 main tomerge column output"
}

my $src = $ARGV[0];
my $mrg = $ARGV[1];
my $col = $ARGV[2];
my $out = $ARGV[3];

if (($col < 12) or ($col > 19)) {
    die "Column of interest must be between 12 and 19.";
}

my $fn;

open my $sh, "<:encoding(utf8)", $src or die "$src:$!";

my %slines;
my %mergelines;

# Skip header line
my $hdr=$csv->getline($sh);
while (my $row = $csv->getline($sh)) {
    my $id = $row->[0];
    if ($id) {
	$slines{$id}=$row;
    }
}
close $sh;

open my $mh, "<:encoding(utf8)", $mrg or die "$mrg:$!";
my $junk = $csv->getline($mh);
while (my $row = $csv->getline($mh)) {
    my $id=$row->[0];
    if ($id) {
	$mergelines{$id}=$row;
    }
}
close $mh;

for my $k (keys %mergelines) {
    if (not (defined($slines{$k}))) {
	$slines{$k} = $mergelines{$k};
    }
}

open my $oh, ">:encoding(utf8)", $out or die "$out:$!";
$csv->eol("\n");
$csv->print($oh,$hdr);
for my $k (sort keys %slines) { # Do in ID order
    my $row = $slines{$k};
    if (defined($mergelines{$k})) {
	# Update column with merged data
	my $ms = $mergelines{$k};
	my $cval = $ms->[$col];
	$row->[$col] = $cval;
    }
    $csv->print($oh,$row);
}
close $oh;

	
	
	




    
    
